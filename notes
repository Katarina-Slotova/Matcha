- started working by following this tutorial: https://www.youtube.com/watch?v=J01rYl9T3BU&ab_channel=freeCodeCamp.org

- installed PostreSQL on my laptop from https://www.postgresql.org/download/
- install POSTRGES ON SCHOOL'S MAC with BREW: https://wiki.postgresql.org/wiki/Homebrew
- BASIC POSTGRES COMMANDS (useful source to learn about postgres: https://www.postgresqltutorial.com/):
	- list all the databases: \l
	- create db: CREATE DATABASE name_of_db;
	- connect to db: \c name_of_db;
	- list all the tables in db: \d
	- see the columns of specific table: \d name_of_table;
	- modify a table by adding a column: ALTER TABLE name_of_table ADD COLUMN name_of_new_column data_type;
	- modify a table by removing a column: ALTER TABLE name_of_table DROP COLUMN name_of_new_column;
 
- created basic db structure; don't know yet how to create the db itself automatically with PostgreSQL
- created basic server configuration:
	- installed node for backend (npm init)
	- installed express (npm install express) for backend
	- installed dotenv (npm install dotenv) for backend, in order to be able to use environment variables (https://www.npmjs.com/package/dotenv - usage instructions are here, but also in the tutorial)
	- install nodemon to automatically monitor any changes in server.js (npm install nodemon)
- make a test home page on localhost with mock data in json format
- make a test signup page on localhost with mock data in json format
- make a test page for finding one specific user on localhost with mock data in json format
- make a put request for modifying user's data
- make a delete request for deleteing a user
- add middleware express.json() in order to save the data sent in post request into "body" & convert it to JS object

- install node-postgres library that enables connecting to postgres db (npm install pg)
- then just follow the usage instructions here: https://node-postgres.com/guides/async-express
- instructions on connecting (use either hardcoded values or use env variables; prefered way is using env variables): https://node-postgres.com/features/connecting
- modified requests in server.js, so that they match syntax for postgres queries

- started client-side by creating basic React setup
- added Bootstrap for styling: https://getbootstrap.com/docs/5.2/getting-started/introduction/
- added FontAwesome for icons: https://cdnjs.com/libraries/font-awesome (copied the first link)
- install react router (npm install react-router-dom)
- install react-bootstrap (npm install react-bootstrap)
- install react-router-bootstrap (npm install react-router-bootstrap)
- installed also fontawesome for icons, but for some reason the icons don't show up (instructions here: https://fontawesome.com/docs/web/use-with/react/)

- created login page
- created signup page
- linked submit buttons on both pages to redirect to home
- fixed navbar so that it showes notifications icon and it has a dropdown menu
- changed styling of: buttons, login, signup
- add footer

- add user card to home page
- add link to user name so that it takes you to a profile page
- link login and signup buttons so that they navigate from landing page to respective pages
- slightly modified db structure in accordance with Matcha subject
- removed search field on home page; instead, the plan is to create a separate search page with advanced search options (according to the subject)

- created context for the list of users
- installed axios (npm install axios)
- installed cors (npm install cors)

Put these into postman at aschool for testing purposes
1. Create a get request to get all the users: http://localhost:3005/home
2. Create a get request to get one user: http://localhost:3005/users/2
3. Create a post request to create a user: http://localhost:3005/signup
{
    "firstname": "Fast",
    "lastname": "Sloth",
    "username": "ChillinChiller",
    "email": "sloth@chill.io",
    "city": "Zootropolis",
    "country": "Wonderland",
    "password": "chill_the_heck_out",
    "image": "sloth.jpg",
    "age": "99",
    "gender": "sloth",
    "bio": "too fast to handle",
    "token": "sdjfvvfhsjlslslslsdls"
}
4. Create a out request to modify user info:
{
    "firstname": "Fast",
    "lastname": "Sloth",
    "username": "ChillinChiller",
    "email": "sloth@chill.io",
    "city": "Zootropolis",
    "country": "Wonderland",
    "password": "chill_the_heck_out",
    "image": "sloth.jpg",
    "age": "100",
    "gender": "sloth",
    "bio": "too fast to handle"
}
5. Delete a user: http://localhost:3005/users/5